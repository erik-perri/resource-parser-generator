import {boolean, number, object, output, string, undefined, union, z} from 'zod';

export const userResourceBaseParser = object({
  id: string(),
  email: string(),
  created_at: union([string(), z.null()]),
});

export type UserResourceBase = output<typeof userResourceBaseParser>;

export const userResourceCombinedParser = object({
  email: union([string(), z.null()]),
  name: union([string(), undefined()]),
});

export type UserResourceCombined = output<typeof userResourceCombinedParser>;

export const userResourceTernariesParser = object({
  ternary_to_int: number(),
  ternary_to_compound: union([boolean(), number(), string()]),
  short_ternary: string(),
});

export type UserResourceTernaries = output<typeof userResourceTernariesParser>;

export const relatedResourceShortFormatNotNamedLikeFormatNameParser = object({
  id: number(),
});

export type RelatedResourceShortFormatNotNamedLikeFormatName = output<typeof relatedResourceShortFormatNotNamedLikeFormatNameParser>;

export const relatedResourceVerboseParser = object({
  id: number(),
  email: string(),
});

export type RelatedResourceVerbose = output<typeof relatedResourceVerboseParser>;

export const relatedResourceBaseParser = object({
  name: string(),
});

export type RelatedResourceBase = output<typeof relatedResourceBaseParser>;

export const userResourceRelatedResourceParser = object({
  with_format_short: relatedResourceShortFormatNotNamedLikeFormatNameParser,
  with_format_verbose: relatedResourceVerboseParser,
  with_format_default: relatedResourceBaseParser,
});

export type UserResourceRelatedResource = output<typeof userResourceRelatedResourceParser>;
